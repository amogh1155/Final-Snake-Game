package sn;

import java.awt.Color;
import javax.media.*;
import java.net.URL;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;

import javax.swing.JPanel;

@SuppressWarnings("serial")
public class GamePannel extends JPanel implements Runnable, KeyListener {


	public static int width;
	public static int length;
	// Game Loop
	private Thread thread;
	private boolean running;
	private long targetTime;
	
	//Render
	private Graphics2D g2d;
	private BufferedImage image;
	private int FirstColor;

	//Game Stuff
	private final int SIZE = 10;
	Entity head, apple, apple1, apple2 ;
	public ArrayList<Entity> snake;
	private  int score;
	private int level;
	private boolean gameover;

	//movement
	private int dx, dy;
	
	//Key Input
	private boolean up, down, right, left, start;
 
	@SuppressWarnings("static-access")
	public GamePannel(int length, int width) {
		this.width = width;
		this.length = length;
		setPreferredSize(new Dimension(this.width, this.length));
		setFocusable(true);
		requestFocus();
		addKeyListener(this);
	}

	public void addNotify() {
		super.addNotify();
		thread = new Thread(this);
		thread.start();
	}

	private void setFPS(int fps) {
		targetTime = 1000 / fps;

	}

	@Override
	public void keyTyped(KeyEvent e) {
		// TODO Auto-generated method stub

	}

	@Override
	public void keyPressed(KeyEvent e) {
		// TODO Auto-generated method stub
		int k = e.getKeyCode();

		if (k == KeyEvent.VK_UP)
			up = true;
		if (k == KeyEvent.VK_DOWN)
			down = true;
		if (k == KeyEvent.VK_LEFT)
			left = true; 
		if (k == KeyEvent.VK_RIGHT)
			right = true;
		if (k == KeyEvent.VK_ENTER)
			start = true;

	}

	@Override
	public void keyReleased(KeyEvent e) {
		// TODO Auto-generated method stub
		int k = e.getKeyCode();

		if (k == KeyEvent.VK_UP)
			up = false;
		if (k == KeyEvent.VK_DOWN)
			down = false;
		if (k == KeyEvent.VK_LEFT)
			left = false;
		if (k == KeyEvent.VK_RIGHT)
			right = false;
		if (k == KeyEvent.VK_ENTER)
			start = false;
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		if (running)
			return;
		init();
		long startTime;
		long elapsed;
		long wait;
		while (running) {
			startTime = System.nanoTime();

			update();
			requestRender();

			elapsed = System.nanoTime() - startTime;
			wait = targetTime - elapsed / 1000000;
			if (wait > 0) {
				try {
					Thread.sleep(wait);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
		}
	}

	private void init() {
		// TODO Auto-generated method stub
		image = new BufferedImage(width, length, BufferedImage.TYPE_INT_ARGB);
		g2d = image.createGraphics();
		running = true;
		setUpLevel();
		gameover = false;
		level = 1;
		setFPS(level * 10);
		
	}

	private void setUpLevel() {
		snake = new ArrayList<Entity>();
		head = new Entity(SIZE);
		head.setPosition(width / 2, length / 2);
		snake.add(head);

		for (int i = 1; i < 3; i++) {
			Entity e = new Entity(SIZE);
			e.setPosition(head.getX() + (i * SIZE), head.getY());
			snake.add(e);
		}
		apple = new Entity(SIZE);
		apple1 = new Entity(SIZE);
		apple2 = new Entity(SIZE);
		setApple();
		score = 0;
		gameover = false;
		level = 1;
		dy = dx = 0;
		setFPS(level * 10);
	}

	public void setApple(){
		int x = (int) (Math.random() * (width - SIZE));
		int y = (int) (Math.random() * (length - SIZE));
		x = x - (x % SIZE);
		y = y - (y % SIZE);
		apple.setPosition(x, y);
			
	}
	public void setApple1(){
		int x = (int) (Math.random() * (width - SIZE));
		int y = (int) (Math.random() * (length - SIZE));
		x = x - (x % SIZE);
		y = y - (y % SIZE);
		apple1.setPosition(x, y);
			
	}
	public void setApple2(){
		int x = (int) (Math.random() * (width - SIZE));
		int y = (int) (Math.random() * (length - SIZE));
		x = x - (x % SIZE);
		y = y - (y % SIZE);
		apple2.setPosition(x, y);
			
	}
	
	
	
	private void requestRender() {
		// TODO Auto-generated method stub
		render(g2d);
		Graphics g = getGraphics();
		g.drawImage(image, 0, 0, null);
		g.dispose();
	}

	private void update() {
		// TODO Auto-generated method stub
		if (gameover){
			if (start){
				setUpLevel();
			}
			return;
		}
		
		if (up && dy == 0) {
			dy = -SIZE;
			dx = 0;
		}
		if (down && dy == 0) {
			dy = SIZE;
			dx = 0;
		}
		if (left && dx == 0) {
			dy = 0;
			dx = -SIZE;
		}
		if (right && dx == 0 && dy != 0){
			dy = 0;
			dx = SIZE;
		}
		

		if (dx != 0 || dy != 0) {

			for (int i = snake.size() - 1; i > 0; i--) {
				snake.get(i).setPosition(snake.get(i - 1).getX(), snake.get(i - 1).getY());
			}
			head.move(dx, dy);
		}

		for (Entity e : snake){
			if(e.isCollsion(head)){
				gameover = true;
				break;
			}
		}
		
		if (apple.isCollsion(head)){
			score++;
			setApple();
			
			Entity e = new Entity(SIZE);
			e.setPosition(-100,-100);
			snake.add(e);
			if (score % 5 == 0){
				level++;
				setFPS(level * 10);
			}
		}
			
			if (apple1.isCollsion(head)){
				score++;
				setApple1();
				
				Entity f = new Entity(SIZE);
				f.setPosition(-100,-100);
				snake.add(f);
				if (score % 5 == 0){
					level++;
					setFPS(level * 10);
				}
		}
			if (apple2.isCollsion(head)){
				score++;
				setApple2();
				
				Entity f = new Entity(SIZE);
				f.setPosition(-100,-100);
				snake.add(f);
				if (score % 5 == 0){
					level++;
					setFPS(level * 10);
				}
		}
		

		if (head.getX() < 0){
			head.setX(width);
		}
		if (head.getY() < 0){
			head.setY(length);
		}
		if (head.getX() > width){
			head.setX(0);
		}
		if (head.getY() > length){
			head.setY(0);
		}

	}

	private void render(Graphics2D g2d2) {
		// TODO Auto-generated method stub
		g2d.clearRect(0, 0, width, length);
			
		g2d.setColor(Color.GREEN);
		
		for (Entity e : snake) {

			e.render(g2d);
		}
		
		g2d.setColor(Color.BLUE);
		snake.get(0).render(g2d);
		
		g2d.setColor(Color.RED);
		apple.render(g2d);
		apple1.render(g2d);
		apple2.render(g2d);
		
		if (gameover){ 
			g2d.setColor(Color.RED);
			g2d.drawString("Game Over Click Enter to Restart", width/2 -95, length/2);
			
		}
		
		g2d.setColor(Color.WHITE);
		g2d.drawString("Score : " + score + " Level : " + level, 10, 10);
	
	if (dx ==0 && dy == 0){
		g2d.setColor(Color.WHITE);
		g2d.drawString("Start", width/2, length/2);
	}
}
}
